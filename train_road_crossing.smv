MODULE traffic_light(barrier_state)
VAR
    state : {red, yellow, green};

ASSIGN
    init(state) := green;
    next(state) := case
        barrier_state = going_down : red;
        barrier_state = down : red;
        barrier_state = going_up : red;
        barrier_state = up & state = red : {red, green};
        state = green : {yellow, green};
        state = yellow : red;
        TRUE : state;
    esac;

MODULE barrier(train_signal, traffic_light_state)
VAR
    state : {up, going_down, down, going_up};
    counter : 0..10;
    train_passed : boolean;

ASSIGN
    init(state) := up;
    init(counter) := 0;
    init(train_passed) := FALSE;
    next(train_passed) := case
        train_signal = passed : TRUE;
        state = up : FALSE;
        TRUE : train_passed;
    esac;
    next(state) := case
        state = up & train_signal = approaching & traffic_light_state = red : going_down;
        state = going_down & counter < 10 : going_down;
        state = going_down & counter = 10 : down;
        state = down & train_signal = passed : going_up;
        state = going_up & counter < 10 : going_up;
        state = going_up & counter = 10 : up;
        TRUE : state;
    esac;
    next(counter) := case
        (state = going_down | state = going_up) & counter < 10 : counter + 1;
        (state = going_down | state = going_up) & counter = 10 : 0;
        TRUE : 0;
    esac;

MODULE train(barrier_state)
VAR
    signal : {approaching, passing, absent, passed};

ASSIGN
    init(signal) := absent;
    next(signal) := case
        signal = absent : {absent, approaching};
        signal = approaching & barrier_state = down : passing;
        signal = passing : passed;
        signal = passed : absent;
        TRUE : signal;
    esac;

MODULE main
VAR
    train1 : process train(barrier1.state);
    traffic_light1 : process traffic_light(barrier1.state);
    barrier1 : process barrier(train1.signal, traffic_light1.state);

SPEC AG (train1.signal = passing -> barrier1.state = down)
SPEC AG (barrier1.state != up -> traffic_light1.state = red)
LTLSPEC G (barrier1.state = going_down -> F (traffic_light1.state = red))